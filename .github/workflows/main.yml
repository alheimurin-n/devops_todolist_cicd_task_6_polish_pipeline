name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name}} -${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      os:
        description: "Select OS for deployment"
        required: true
        default: "ubuntu-latest"
        type: choice
        options:
          - "ubuntu-latest"
          - "windows-latest"
      python_version:
        description: "Select Python version"
        required: true
        default: "3.8"
        type: choice
        options:
          - "3.8"
          - "3.9"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PythonVersion: "3.8"
  OSDefault: ubuntu-latest
  DockerImageName: todoapp

jobs:
  python-ci:
    strategy:
      matrix:
        PythonVersion: ["3.8", "3.9"]
        OsType: [ubuntu-latest, windows-latest]

    name: Python-CI
    runs-on: ${{ matrix.OsType }}
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts-${{ matrix.OsType }}-${{ matrix.PythonVersion }}
          path: .

      - name: Upload helm artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts-${{ matrix.OsType }}-${{ matrix.PythonVersion }}
          path: ${{ github.workspace }}/helm-charts

      - name: Upload kind cluster artifact
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: kind-cluster-${{ matrix.OsType }}-${{ matrix.PythonVersion }}
          path: ${{ github.workspace }}/cluster.yml

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:
      - uses: actions/download-artifact@v4
        name: Download python artifacts
        with:
          name: python-artifacts-${{ github.event.inputs.os || env.OSDefault }}-${{ github.event.inputs.python_version || env.PythonVersion }}
          path: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ./src
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    if: github.ref_name == 'main'
    name: Helm CI
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: helm-artifacts-${{ github.event.inputs.os || env.OSDefault }}-${{ github.event.inputs.python_version || env.PythonVersion }}
          path: .

      - name: Set Up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Lint helm
        run: helm lint ./todoapp/

      - name: Template Helm
        run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

      - name: Package Helm
        run: helm package ./todoapp

      - name: Upload Helm Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-package
          path: ./*.tgz

  deploy-helm-dev:
    name: Deploy helm to Development
    uses: ./.github/workflows/reusable-deployment.yml
    needs: [helm-ci, docker-ci]
    secrets: inherit
    with:
      environment: development
      version: ${{ github.sha }}
      OSType: ${{ github.event.inputs.os || 'ubuntu-latest'}}
      PythonVersion: ${{ github.event.inputs.python_version || '3.8' }}

  deploy-helm-stg:
    name: Deploy helm to Staging
    uses: ./.github/workflows/reusable-deployment.yml
    needs: [deploy-helm-dev]
    secrets: inherit
    with:
      environment: staging
      version: ${{ github.sha }}
      OSType: ${{ github.event.inputs.os || 'ubuntu-latest'}}
      PythonVersion: ${{ github.event.inputs.python_version || '3.8' }}
      helm-values-path: ./todoapp/values/stg.yaml
      helm-release-name: todoapp-staging
      node-port: 30008
